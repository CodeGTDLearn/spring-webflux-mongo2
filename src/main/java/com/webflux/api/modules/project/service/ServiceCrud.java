package com.webflux.api.modules.project.service;

import com.webflux.api.modules.project.entity.Project;
import com.webflux.api.modules.project.repo.ICrud;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Service("serviceCrud")
@RequiredArgsConstructor
public class ServiceCrud implements IServiceCrud {

  private final ICrud crud;

  /*╔══════════════════════════════╗
    ║   REACTIVE-MONGO-REPOSITORY  ║
    ╚══════════════════════════════╝*/
  @Override
  public Mono<Project> save(Project project) {

    return crud.save(project);
  }

  @Override
  @Transactional
  public Mono<Project> update(Project project) {

    return crud.save(project);
  }

  @Override
  public Flux<Project> findAll() {

    return crud.findAll();
  }


  @Override
  public Mono<Project> findById(String projectId) {

    return crud.findById(projectId);
  }


  @Override
  public Mono<Void> deleteById(String projectId) {

    return crud.deleteById(projectId);
  }

  /*╔══════════════════════════════╗
  ║    AUTOGENERATED-QUERIES     ║
  ╚══════════════════════════════╝*/
  @Override
  public Flux<Project> findByName(String projectName) {

    return crud.findByName(projectName);
  }
}